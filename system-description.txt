
 Описание распределенной измерительной системы
 

 ================
 = 1. Структура =
 ================




 ==============
 = 2. Функции =
 ==============

 2.1 Базовые функции всей сети
 -----------------------------
1. Измерение (согласно спецификации отдельных устройств)
2. Управление (согласно спецификации отдельных устройств)
3. Обработка данных согласно программе (для каждого отдельного устройства допустима своя программа)
4. Отображение данных согласно программе (допустима модификация этой части программы прямо на устройстве, без участия компьютера)


 2.2 Базовые функции отдельного устройства
 -----------------------------------------
1. Регистрация в сети
2. Предоставление именованных ресурсов согласно возможностям устройства (см. "3.1 Ресурсы")
3. Запрос ресурсов из сети
4. Обработка ресурсов и предоставление именованных ресурсов сооьветсвующих обработанным данным
5. Отображение ресурсов в реальном времени (из любого узла сети)
6. Синхронизация оси времени с сетью


 2.3 Дополнительные функции отдельного устройства
 ------------------------------------------------
!) Предоставление и использование ресурсов вывода (экраны)
!) Профили вывода
!) Профили ресурсов (различные наборы снимаемых показаний, функций обработки, etc)
!) Прием команд на выбор профилей
*) Запись программ профилей с компьютера
*) Обновление ПО с компьютера по RS-485
*) Синхронизация ПО между устройствами





 =====================================
 = 3. Описания отдельных компонентов =
 =====================================
 
 3.1 Ресурсы
 -----------
Ресурсы -- условные элементы, глобально доступные по сети, с возможностью считывания данных из них и/или записи. Например ресурсом может быть замер напряжения, точки графика I-t, реестр самих ресурсов, программа устройства, экран устройства,...

Ресурсы могут иметь следующие типы:

#define NM_NAME_T_DOUBLE        0x0000 /* Число с плавающей точкой (8 байт)         */
#define NM_NAME_T_INT64         0x0001 /* Целое число (8 байт)                      */
#define NM_NAME_T_WORD          0x0003 /* Целое число (2 байта)                     */
#define NM_NAME_T_BOOL          0x0007 /* Булево значение (1 или 0)                 */

#define NM_NAME_T_VALUE         0x0000 /* Значение          */
#define NM_NAME_T_ARRAY         0x0010 /* Массив значений   */

#define NM_NAME_T_WRITABLE      0x0020 /* Записываемое      */
#define NM_NAME_T_READABLE      0x0040 /* Считываемое       */

#define NM_NAME_T_STREAMED      0x0080 /* Потоковое         */

#define NM_NAME_T_RPC           0xFFFF /* Выполнение процедуры (например перезагрузка, запуск измерений) */


 3.1.1 Потоковые ресурсы
 - - - - - - - - - - - -
В отличие от обычных ресурсов, потоковые предоставляют данные в режиме реального времени. Обращение к ресурсу в данном случае должно быть записью имени обратного ресурса, соответствующего типа, предоставляющего возможность записи.

 3.1.2 Обработка ресурсов
 - - - - - - - - - - - - 
Вариант 1. Для ресурсов должна существовать возможность задания функции-обработчика запроса чтения/записи. Возможно также следует предусмотреть кэширование последнего значения по времени или флагу изменения для таких функций. Такой вариант позволит реализовать выполнение вычислений значений вычисляемых ресурсов только по требованию, снимая общую нагрузку с процессора. С другой стороны это же увеличит время ожидания ответа, даже в случае доступности ресурса на локальном устройстве. К преимуществам можно также отнести то, что реализация ресурса NM_NAME_T_RPC в таком случае лишь частный случай модели функций.
Вариант 2. Ресурсы являют собой переменные, обновление происходит асинхронно. В таком случае доступ является мгновенным, но часть данных в реальном времени можно упустить. Стоит также отметить что для данных выводимых на экран это не имеет значения, в то время как массивы данных замеров не будут обновлятся до следующего же запроса на выполнение. Тем не менее, реализация NM_NAME_T_RPC требует отдельного компонента в ресурсах.
Вариант 3. В принципе первый вариант позволяет реализовать второй как стандартный компонент без лишних действий. Только 1й вариант сложнее в реализации.

 3.1.3 Доступ к ресурсам
 - - - - - - - - - - - -
Каждое устройтсво должно хранить хэш-таблицу локальных ресурсов (возможно зашитую) и в памяти хранить таблицу имя-ресурса<->адрес-устройства-с-этим-ресурсом для N последних запрошенных ресурсов (используя хэш-таблицу). Система разрешения имен ресурсов должна запрашивать ресурс по его хэшу с целью определения устройства на котором он хранится. Поскольку broadcast-сообщений (глобальных) следует избегать (для предотвращения возможных случаев коллизии пакетов), опрос следует производить по очереди. Возможно следует для оптимизации предусмотреть информирование о возможном нахождении ресурса -- если устройство у которого запрашивают ресурс имеет в кэше последних разрешенных ресурсов ресурс с таким же хэшем, оно должно указать адрес устройства с этим ресурсом в ответе. В таком случае следующим опрошенным устройством должно стать указанное, но не факт что последним, поскольку возможна коллизия хэшей.

 3.2 Синхронизация
 -----------------
Для измерений использующих несколько приборов одновременно и составляющих далее графики необходима возможность синхронного запуска измерений и одинаковая шкала времени на всех устройствах. В UART API системы уже реализован метод синхронизации UART: все устройства прекращают связь, все устройства кроме одного инициируют uart_sync_recieve(), оставшееся инициирует uart_sync_transmit(). Callback-функция выполняет сброс таймера. Теперь устройства в течении некоторого времени (зависит от точности кристаллов каждого) будут находиться в синхронизированном состоянии. Можно запросить ресурс-процедуру запуска измерений глобально.















